{
  "result": "```typescript\nimport { createFlow, Flow } from 'flyde';\n\ninterface ObjectWithPrice {\n  price: number;\n}\n\nconst sumPrices = (objects: ObjectWithPrice[]): number => {\n  let sum = 0;\n  for (const obj of objects) {\n    sum += obj.price;\n  }\n  return sum;\n};\n\nconst sumPricesFlow: Flow<ObjectWithPrice[], number> = createFlow(\n  (objects) => sumPrices(objects)\n);\n\nexport default sumPricesFlow;\n```\nIn this example, we define a function `sumPrices` that takes an array of objects and returns the sum of the `price` property of each object. We then create a Flyde flow called `sumPricesFlow` that takes an array of `ObjectWithPrice` objects as input and returns a number as output. The flow simply calls the `sumPrices` function with the input objects and returns the result.",
  "tokens": 337,
  "completionTime": 4559,
  "generatorName": "chat-completion-gpt-3.5-turbo-very-condensed-no-examples",
  "prompt": "Receive a list of objects and sum the 'price' property of each",
  "score": 1,
  "remarks": "Invalid metadata row ```typescript",
  "redid": false
}