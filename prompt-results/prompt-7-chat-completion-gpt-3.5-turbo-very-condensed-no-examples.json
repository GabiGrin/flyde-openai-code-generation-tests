{
  "result": "```typescript\nimport { createPart, createNode, createGraph } from \"flyde\";\n\n// Round robin function\nfunction roundRobin(value: any): number {\n  return value % 3;\n}\n\n// Create round robin part\nconst roundRobinPart = createPart({\n  id: \"roundRobin\",\n  inputs: [\"value\"],\n  outputs: [\"output1\", \"output2\", \"output3\"],\n  completionType: \"explicit\",\n  reactiveInputs: [\"value\"],\n  fn: async (inputs, outputs) => {\n    const value = inputs.value;\n    const outputIndex = roundRobin(value);\n    const outputKey = `output${outputIndex + 1}`;\n    outputs[outputKey] = value;\n  },\n});\n\n// Create graph\nconst graph = createGraph();\n\n// Add round robin part to the graph\ngraph.addNode(createNode(roundRobinPart));\n\n// Connect inputs and outputs\ngraph.connect(\"inputValue\", \"roundRobin.value\");\ngraph.connect(\"roundRobin.output1\", \"output1\");\ngraph.connect(\"roundRobin.output2\", \"output2\");\ngraph.connect(\"roundRobin.output3\", \"output3\");\n\n// Run the graph\ngraph.run({ inputValue: 5 }).then((result) => {\n  console.log(result);\n}).catch((error) => {\n  console.error(error);\n});\n```\n\nIn the above code, we create a Flyde part called `roundRobinPart` that takes a value as input and outputs the value to one of three outputs based on a round-robin algorithm. The `roundRobin` function is a simple implementation of the round-robin algorithm that returns the index of the output based on the input value modulo 3.\n\nThe `roundRobinPart` is defined with the necessary metadata, including the inputs (`value`) and outputs (`output1`, `output2`, `output3`). It also specifies that the completion type is explicit, meaning it will not automatically complete until explicitly instructed to do so. The reactive input `value` ensures that the part will be re-evaluated whenever the input value changes.\n\nThe `fn` function of the `roundRobinPart` is an asynchronous function that takes the inputs and outputs as arguments. It retrieves the input value, calculates the output index using the `roundRobin` function, and assigns the value to the corresponding output key.\n\nWe then create a graph and add the `roundRobinPart` as a node in the graph. We connect the input value to the `roundRobin.value` input and the three outputs of the `",
  "tokens": 658,
  "completionTime": 12914,
  "generatorName": "chat-completion-gpt-3.5-turbo-very-condensed-no-examples",
  "prompt": "Round robin a value into one of 3 outputs",
  "score": 1,
  "remarks": "Invalid metadata row ```typescript",
  "redid": false
}