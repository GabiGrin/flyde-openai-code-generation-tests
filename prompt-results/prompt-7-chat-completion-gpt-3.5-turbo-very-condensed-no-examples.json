{
  "result": "```typescript\nimport { createPart, Part } from \"flyde\";\n\ntype RoundRobinInput = {\n  value: any;\n};\n\ntype RoundRobinOutput = {\n  output: number;\n};\n\nconst roundRobin: Part<RoundRobinInput, RoundRobinOutput> = createPart(\n  ({ value }, { output }) => {\n    const currentOutput = output || 0;\n    const nextOutput = (currentOutput + 1) % 3;\n    return { output: nextOutput };\n  }\n);\n\nexport default roundRobin;\n```\n\nUsage:\n```typescript\nimport roundRobin from \"./roundRobin\";\n\nconst input = { value: \"Hello, world!\" };\n\nconst { output } = roundRobin(input);\n\nconsole.log(output); // 0, 1, 2, 0, 1, 2, ...\n```\n\nIn this example, the `roundRobin` part takes an input object with a `value` property and outputs an object with an `output` property. The `output` property represents the index of the output to which the value is round-robin'd.\n\nThe `roundRobin` part uses a closure to keep track of the current output index. On each invocation, it increments the index by 1 and takes the modulo 3 to ensure it stays within the range of 0 to 2. The resulting index is then returned as the output.",
  "tokens": 427,
  "completionTime": 7564,
  "generatorName": "chat-completion-gpt-3.5-turbo-very-condensed-no-examples",
  "prompt": "Round robin a value into one of 3 outputs",
  "score": 1,
  "remarks": "Invalid metadata row ```typescript",
  "redid": false,
  "lastUpdated": "2023-08-27T15:04:11.667Z"
}