{
  "result": "// Part 1: Get Property Value\nconst getProperty = async (context, property, object) => {\n    const value = object[property];\n    return { value };\n};\n\nconst getPropertyPart = {\n    id: \"getProperty\",\n    inputs: [\"property\", \"object\"],\n    outputs: [\"value\"],\n    handler: getProperty,\n};\n\n// Part 2: Check Value\nconst checkValue = async (context, value, first, second, third) => {\n    if (value === first) {\n        return { output: \"1\" };\n    } else if (value === second) {\n        return { output: \"2\" };\n    } else if (value === third) {\n        return { output: \"3\" };\n    } else {\n        return { output: \"default\" };\n    }\n};\n\nconst checkValuePart = {\n    id: \"checkValue\",\n    inputs: [\"value\", \"first\", \"second\", \"third\"],\n    outputs: [\"output\"],\n    handler: checkValue,\n};\n\n// Connect the parts\nconst parts = [getPropertyPart, checkValuePart];\nconst connections = [\n    { from: \"getProperty.value\", to: \"checkValue.value\" },\n    { from: \"checkValue.output\", to: \"1\" },\n    { from: \"checkValue.output\", to: \"2\" },\n    { from: \"checkValue.output\", to: \"3\" },\n    { from: \"checkValue.output\", to: \"default\" },\n];\n\n// Create a graph from the parts and connections\nconst graph = { parts, connections };\n\n// Create a Fylde instance with the graph\nconst fylde = new Fylde(graph);\n\n// Set the inputs and get the outputs\nfylde.setInputs({\n    property: \"name\",\n    object: { name: \"John\" },\n    first: \"John\",\n    second: \"Jane\",\n    third: \"Doe\",\n});\nconst outputs = fylde.getOutputs();\n\n// Log the outputs\nconsole.log(outputs); // { \"1\": { value: { name: \"John\" } } }",
  "tokens": 629,
  "completionTime": 6668,
  "generatorName": "chat-completion-ft:gpt-3.5-turbo-0613:personal:flyde-23-08-27:7s9Gy7SR-very-condensed-no-examples",
  "prompt": "receive an object, a property name and 3 values. If the value of the property is equal to the first value, output the object to output 1, if it's the second, output to output 2, if it's the third, output to output 3, otherwise, output to 'default' output",
  "score": 1,
  "remarks": "Invalid metadata row // Part 1: Get Property Value"
}